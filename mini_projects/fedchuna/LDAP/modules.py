import sys
import os
import ldap

parent_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
sys.path.append(parent_dir)

from keylooker import module as m
from network_tester import tester as t



# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
## –ë—É–¥—É—Ç –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ–∫–Ω–æ
### –ò –ª–æ–≥–∏–∫—É –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—Å—è –≤ –º–æ–¥—É–ª–∏
ldap_server = 'ldap://s-kiev-r03.uvk.ua'
bind_dn = 'CN=–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –§–µ–¥—á—É–Ω –ê—Ä—Ç–µ–º,OU=DOMAIN_ADMINS,OU=SYS,OU=GROUPS,OU=UVK,DC=uvk,DC=ua'
bind_password = '*YfM28~y9u'
base_dn = 'OU=UVK,DC=uvk,DC=ua'
search_filter = '(&(objectClass=user)(cn=Fedchun Artem))'
search_attributes = ['sAMAccountName', 'displayName', 'mail', 'telephonenumber']
#static variables
l = None
search_info_dict = dict()
#Function to work With Ldap
def log_message(message):
        log_file_name = "LDAP.log"
        log_pass = m.get_log_file_path(log_file_name)
        """ Writes a timestamped message to the specified log file. """
        try:
            with open(log_pass, 'a', encoding='utf-8') as log_f:
                log_f.write(f"{m.date_time()}:{message}\n")
        except Exception as e:
            print(f"Error writing to log file: {e}") 

log_message("-----Module For Warcking with LDAP Initialized-----")

def bind(l_s, l_i, b_dn, b_pass):
    try:
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
        log_message("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
        l_i = ldap.initialize(l_s)
        l_i.set_option(ldap.OPT_REFERRALS, 0)
        print("–ü–æ–ø—ã—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
        log_message("–ü–æ–ø—ã—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
        l_i.simple_bind_s(b_dn, b_pass)
        print("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! ‚úÖ")
        log_message("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! ‚úÖ")
        return l_i
    except ldap.LDAPError as e:
        log_message(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ LDAP: {e}")
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ LDAP: {e}")

def search_user(l_ll, bas_dn, search_fil, search_attribut, dct):
    try:
        print("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞...")
        log_message("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞...")
        h = "\\"
        counter = 0
        result_set = l_ll.search_s(bas_dn, ldap.SCOPE_SUBTREE, search_fil, search_attribut)
        print(result_set)
        log_message(f"Result of search {result_set}")
        if result_set:
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω! üéâ")
            log_message("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω! üéâ")
            for dn, entry in result_set:
                if dn is not None and entry:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ DN –∏ entry –Ω–µ –ø—É—Å—Ç—ã–µ
                    f_i = dn.split(',')
                    f_i = f_i[-3::-1]
                    for i in f_i:
                        c = ''
                        c += f"{i}\\"
                        c = c[3::]
                        h += c
                        counter += 1
                    f_i = h[:-1:]
                    print(f"Distinguished Name: {f_i}")
                    log_message(f"Distinguished Name: {f_i}")
                    dct["Distinguished Name"] = f_i
                    for attr, value in entry.items():
                        if value:
                            print(f"  {attr}: {value[0].decode('utf-8')}")
                            log_message(f"  {attr}: {value[0].decode('utf-8')}")
                            dct[attr] = value[0].decode('utf-8')
                        else:
                            print(f"  {attr}: (–∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")
                            log_message(f"  {attr}: {value[0].decode('utf-8')}")
                            
                        # print(f"  {attr}: {value[0].decode('utf-8')}")
                        # log_message(f"  {attr}: {value[0].decode('utf-8')}")
        else:
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. üòî")
            log_message("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. üòî")
        return dct

    except ldap.LDAPError as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ LDAP: {e}")
        log_message(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ LDAP: {e}")

def create_user():
    pass

def cerate_group():
    pass

def search_group():
    pass

def close_bind(ll):
    if ll:
        ll.unbind_s()
        log_message("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ. üëã")
        print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ. üëã")
    else:
        log_message("-----Module For Warcking with LDAP Initialized-----")

l = bind(ldap_server, l, bind_dn, bind_password)
print(l)
search_info_dict = search_user(l, base_dn, search_filter, search_attributes, search_info_dict)

if __name__ == "__main__":
    close_bind(l)
    print(search_info_dict)
