from django.core.validators import MaxValueValidator, MinValueValidator
from django.db.models import (
    Model,
    CharField,
    TextField,
    ForeignKey,
    CASCADE,
    BooleanField,
    DateTimeField, IntegerField,
)
from django.utils.translation import gettext_lazy as _


class Project(Model):
    title = CharField(
        max_length=255, blank=False, null=False, verbose_name=_("Project title")
    )
    description = TextField(blank=False, null=False, verbose_name=_("Description"))
    comment = TextField(blank=True, null=True, verbose_name=_("Comment"))
    channel = CharField(
        max_length=255,
        blank=False,
        null=False,
        verbose_name=_("Channel name"),
        help_text=_("Channel ID or public name"),
    )

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = _("Project")
        verbose_name_plural = _("Projects")


class ProjectPlan(Model):
    project = ForeignKey(Project, on_delete=CASCADE, verbose_name=_("Project plan"))
    title = CharField(
        max_length=255, blank=False, null=False, verbose_name=_("Project title")
    )
    description = TextField(blank=True, null=True, verbose_name=_("Description"))
    max_symbols = IntegerField(
        default=500,
        blank=False,
        null=False,
        validators=[MinValueValidator(500), MaxValueValidator(2000)],
        verbose_name=_("Max symbols per posts"))
    is_gpt = BooleanField(
        default=False,
        verbose_name=_("Generated by GPT"),
        help_text=_(
            "If True, project plan posts is automatically generated by Chat GPT"
        ),
    )
    post_count = IntegerField(
        default=1,
        blank=False,
        null=False,
        validators=[MinValueValidator(1), MaxValueValidator(10)],
        verbose_name=_("Count of posts"),
        help_text=_("This option work only with is_gpt = True."),
    )
    comment = TextField(blank=True, null=True, verbose_name=_("Comment"))

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = _("Project plan")
        verbose_name_plural = _("Project plans")


class ProjectPlanPost(Model):
    plan = ForeignKey(ProjectPlan, on_delete=CASCADE, verbose_name=_("Plan title"))
    title = CharField(
        max_length=255, blank=False, null=False, verbose_name=_("Project title")
    )
    description = TextField(blank=True, null=True, verbose_name=_("Description"))
    is_approved = BooleanField(default=False, verbose_name=_("Is approved"))
    is_draft = BooleanField(default=False, verbose_name=_("Is draft"))
    is_published = BooleanField(default=False, verbose_name=_("Is published"))
    comment = TextField(blank=True, null=True, verbose_name=_("Comment"))

    publish_at = DateTimeField(blank=True, null=True, verbose_name=_("Publish at"))
    created_at = DateTimeField(auto_now_add=True, verbose_name=_("Created at"))
    updated_at = DateTimeField(auto_now=True, verbose_name=_("Updated at"))

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = _("Project plan post")
        verbose_name_plural = _("Project plan posts")
